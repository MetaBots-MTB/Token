{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "txHash": "0x232d1492ff03fd4b83abe03f3543834d9df4d7899c4155c21e3f17d55320c810",
    "deployTransaction": {
      "hash": "0x232d1492ff03fd4b83abe03f3543834d9df4d7899c4155c21e3f17d55320c810",
      "type": 2,
      "accessList": [],
      "blockHash": "0xc7987ce29564a7911dd5575fe606472391ce57eef22f255f4254750c09cdb62b",
      "blockNumber": 8,
      "transactionIndex": 0,
      "confirmations": 1,
      "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x535de56e"
      },
      "maxPriorityFeePerGas": {
        "type": "BigNumber",
        "hex": "0x3b9aca00"
      },
      "maxFeePerGas": {
        "type": "BigNumber",
        "hex": "0x6b2100dc"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 7,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0xd6621d0634eaca5e0f7dfe64402c4166acb47bf3864190b1e4a4ee9dcd1b8ae5",
      "s": "0x33229565e4de18c878470191375d5192fd6dc03c3ecd6da9f5fbf634f527ae47",
      "v": 0,
      "creates": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
      "chainId": 31337
    }
  },
  "proxies": [
    {
      "address": "0xa85233C63b9Ee964Add6F2cffe00Fd84eb32338f",
      "txHash": "0x836cfadea37ea1ac308dd25004f4695727c86fc50808e12b1ab1cb55b4983acd",
      "kind": "transparent"
    },
    {
      "address": "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
      "txHash": "0xbfc0a3d5170b1fb6a1d4fe651833301cf6b9f0a3b08d54e8f15e4f858e5fc857",
      "kind": "transparent"
    },
    {
      "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
      "txHash": "0x39ef6cbbdeafd770674d37bfa57a35e61856a33e71b57e4b3c869484fd2ce455",
      "kind": "transparent"
    },
    {
      "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
      "txHash": "0x97adffeeb22ab7b48f86cff95c94c9aec03b8889ddfb95ea8875e768f8ec1bb5",
      "kind": "transparent"
    }
  ],
  "impls": {
    "f509dc0911b56d1dcd6843c1750d38d3b2c3a7df810de241f5851278195226d1": {
      "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
      "txHash": "0x9e07193a237847411ff2d34cf632359e14fcfe1116094a7bda76e8441a723a5c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:42"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:362"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "ERC2612Upgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1424_storage)",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:19"
          },
          {
            "contract": "ERC2612Upgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:22"
          },
          {
            "contract": "ERC2612Upgradeable",
            "label": "_TRANSFER_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:24"
          },
          {
            "contract": "MetaBots",
            "label": "dividendTracker",
            "type": "t_contract(IDividendTracker)8305",
            "src": "contracts\\MetaBots.sol:44"
          },
          {
            "contract": "MetaBots",
            "label": "gasForProcessing",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:45"
          },
          {
            "contract": "MetaBots",
            "label": "automatedMarketMakerPairs",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\MetaBots.sol:49"
          },
          {
            "contract": "MetaBots",
            "label": "feeExcludedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\MetaBots.sol:51"
          },
          {
            "contract": "MetaBots",
            "label": "buybackAddress",
            "type": "t_address_payable",
            "src": "contracts\\MetaBots.sol:53"
          },
          {
            "contract": "MetaBots",
            "label": "buybackFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:54"
          },
          {
            "contract": "MetaBots",
            "label": "developmentAddress",
            "type": "t_address_payable",
            "src": "contracts\\MetaBots.sol:55"
          },
          {
            "contract": "MetaBots",
            "label": "developmentFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:56"
          },
          {
            "contract": "MetaBots",
            "label": "marketingAddress",
            "type": "t_address_payable",
            "src": "contracts\\MetaBots.sol:57"
          },
          {
            "contract": "MetaBots",
            "label": "marketingFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:58"
          },
          {
            "contract": "MetaBots",
            "label": "liquidityAddress",
            "type": "t_address",
            "src": "contracts\\MetaBots.sol:59"
          },
          {
            "contract": "MetaBots",
            "label": "liquidityFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:60"
          },
          {
            "contract": "MetaBots",
            "label": "psiTokenAddress",
            "type": "t_address",
            "src": "contracts\\MetaBots.sol:61"
          },
          {
            "contract": "MetaBots",
            "label": "psiFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:62"
          },
          {
            "contract": "MetaBots",
            "label": "lastSells",
            "type": "t_mapping(t_address,t_struct(LastSell)3963_storage)",
            "src": "contracts\\MetaBots.sol:68"
          },
          {
            "contract": "MetaBots",
            "label": "sellLimit",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:69"
          },
          {
            "contract": "MetaBots",
            "label": "sellAmountLimited",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:70"
          },
          {
            "contract": "MetaBots",
            "label": "tradingPaused",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:71"
          },
          {
            "contract": "MetaBots",
            "label": "dexRouter",
            "type": "t_contract(IDEXRouter)8124",
            "src": "contracts\\MetaBots.sol:73"
          },
          {
            "contract": "MetaBots",
            "label": "dexPair",
            "type": "t_address",
            "src": "contracts\\MetaBots.sol:74"
          },
          {
            "contract": "MetaBots",
            "label": "inSwapAndLiquify",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:76"
          },
          {
            "contract": "MetaBots",
            "label": "swapAndLiquifyEnabled",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:77"
          },
          {
            "contract": "MetaBots",
            "label": "minTokensBeforeSwap",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:78"
          }
        ],
        "types": {
          "t_contract(IDividendTracker)8305": {
            "label": "contract IDividendTracker"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_mapping(t_address,t_struct(LastSell)3963_storage)": {
            "label": "mapping(address => struct MetaBots.LastSell)"
          },
          "t_struct(LastSell)3963_storage": {
            "label": "struct MetaBots.LastSell",
            "members": [
              {
                "label": "time",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IDEXRouter)8124": {
            "label": "contract IDEXRouter"
          },
          "t_mapping(t_address,t_struct(Counter)1424_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1424_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "4a4f459d35abc5880fdbc90493efcb836b93b8b7ee4d6b203df405aaeb42ed38": {
      "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
      "txHash": "0x75d58cb58744c334c568c6fa3b021a1b7eb2875709671a4781a1472445656e56",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "rewardsToken",
            "type": "t_contract(ERC20Upgradeable)802",
            "src": "contracts\\MetaBotsStaking.sol:19"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "stakingToken",
            "type": "t_contract(ERC20Upgradeable)802",
            "src": "contracts\\MetaBotsStaking.sol:20"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "startTime",
            "type": "t_uint256",
            "src": "contracts\\MetaBotsStaking.sol:24"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "configuredLocks",
            "type": "t_array(t_struct(ConfiguredLock)6614_storage)dyn_storage",
            "src": "contracts\\MetaBotsStaking.sol:30"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "allAccountStakes",
            "type": "t_mapping(t_address,t_array(t_struct(AccountStake)6635_storage)dyn_storage)",
            "src": "contracts\\MetaBotsStaking.sol:43"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)802": {
            "label": "contract ERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(ConfiguredLock)6614_storage)dyn_storage": {
            "label": "struct MetaBotsStaking.ConfiguredLock[]"
          },
          "t_struct(ConfiguredLock)6614_storage": {
            "label": "struct MetaBotsStaking.ConfiguredLock",
            "members": [
              {
                "label": "time",
                "type": "t_uint64"
              },
              {
                "label": "apy",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_array(t_struct(AccountStake)6635_storage)dyn_storage)": {
            "label": "mapping(address => struct MetaBotsStaking.AccountStake[])"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(AccountStake)6635_storage)dyn_storage": {
            "label": "struct MetaBotsStaking.AccountStake[]"
          },
          "t_struct(AccountStake)6635_storage": {
            "label": "struct MetaBotsStaking.AccountStake",
            "members": [
              {
                "label": "active",
                "type": "t_bool"
              },
              {
                "label": "apy",
                "type": "t_uint32"
              },
              {
                "label": "started",
                "type": "t_uint64"
              },
              {
                "label": "unlock",
                "type": "t_uint64"
              },
              {
                "label": "lastUpdated",
                "type": "t_uint64"
              },
              {
                "label": "stake",
                "type": "t_uint256"
              },
              {
                "label": "currentRewards",
                "type": "t_uint256"
              },
              {
                "label": "withdrawnRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
