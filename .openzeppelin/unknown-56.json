{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xa1e97299c83528ac66d3753E70aDf0Bf3F2Ec34A",
    "txHash": "0xf0a275c9a1fb8147ed066789d42944444a5b9f80667f0503f864c383a2364e44"
  },
  "proxies": [
    {
      "address": "0x09861d8c3C1350699f8522253E5485f751D6fA78",
      "txHash": "0xf5eafdccf5f0399eccc3b8b19c9a854369cb2c3f19c457cd386015f11db19681",
      "kind": "transparent"
    },
    {
      "address": "0x52C5b4D0C6296D3C7ab81662C54140509D8694B6",
      "txHash": "0xf90ed5729e738310176a086db061a91d48c1091c5014d63f53ae180145aa543c",
      "kind": "transparent"
    }
  ],
  "impls": {
    "d6f2cf3ff5aa267934313dfeab41828f6dac2791220c5c6c74b2b8f37c931f70": {
      "address": "0xA96444A5B4E3499D7310B4F0DC8d8e3705a6cD76",
      "txHash": "0xb0044f339b56f4d30d5811a03195e5dc19cd40090648650d9de3277846f19385",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:42"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:362"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "ERC2612Upgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1366_storage)",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:19"
          },
          {
            "contract": "ERC2612Upgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:22"
          },
          {
            "contract": "ERC2612Upgradeable",
            "label": "_TRANSFER_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:24"
          },
          {
            "contract": "MetaBots",
            "label": "dividendTracker",
            "type": "t_contract(IDividendTracker)7337",
            "src": "contracts\\MetaBots.sol:44"
          },
          {
            "contract": "MetaBots",
            "label": "gasForProcessing",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:45"
          },
          {
            "contract": "MetaBots",
            "label": "automatedMarketMakerPairs",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\MetaBots.sol:49"
          },
          {
            "contract": "MetaBots",
            "label": "feeExcludedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\MetaBots.sol:51"
          },
          {
            "contract": "MetaBots",
            "label": "buybackAddress",
            "type": "t_address_payable",
            "src": "contracts\\MetaBots.sol:53"
          },
          {
            "contract": "MetaBots",
            "label": "buybackFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:54"
          },
          {
            "contract": "MetaBots",
            "label": "developmentAddress",
            "type": "t_address_payable",
            "src": "contracts\\MetaBots.sol:55"
          },
          {
            "contract": "MetaBots",
            "label": "developmentFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:56"
          },
          {
            "contract": "MetaBots",
            "label": "marketingAddress",
            "type": "t_address_payable",
            "src": "contracts\\MetaBots.sol:57"
          },
          {
            "contract": "MetaBots",
            "label": "marketingFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:58"
          },
          {
            "contract": "MetaBots",
            "label": "liquidityAddress",
            "type": "t_address",
            "src": "contracts\\MetaBots.sol:59"
          },
          {
            "contract": "MetaBots",
            "label": "liquidityFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:60"
          },
          {
            "contract": "MetaBots",
            "label": "psiTokenAddress",
            "type": "t_address",
            "src": "contracts\\MetaBots.sol:61"
          },
          {
            "contract": "MetaBots",
            "label": "psiFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:62"
          },
          {
            "contract": "MetaBots",
            "label": "lastSells",
            "type": "t_mapping(t_address,t_struct(LastSell)3905_storage)",
            "src": "contracts\\MetaBots.sol:68"
          },
          {
            "contract": "MetaBots",
            "label": "sellLimit",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:69"
          },
          {
            "contract": "MetaBots",
            "label": "sellAmountLimited",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:70"
          },
          {
            "contract": "MetaBots",
            "label": "tradingPaused",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:71"
          },
          {
            "contract": "MetaBots",
            "label": "dexRouter",
            "type": "t_contract(IDEXRouter)7156",
            "src": "contracts\\MetaBots.sol:73"
          },
          {
            "contract": "MetaBots",
            "label": "dexPair",
            "type": "t_address",
            "src": "contracts\\MetaBots.sol:74"
          },
          {
            "contract": "MetaBots",
            "label": "inSwapAndLiquify",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:76"
          },
          {
            "contract": "MetaBots",
            "label": "swapAndLiquifyEnabled",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:77"
          },
          {
            "contract": "MetaBots",
            "label": "minTokensBeforeSwap",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:78"
          }
        ],
        "types": {
          "t_contract(IDividendTracker)7337": {
            "label": "contract IDividendTracker"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_mapping(t_address,t_struct(LastSell)3905_storage)": {
            "label": "mapping(address => struct MetaBots.LastSell)"
          },
          "t_struct(LastSell)3905_storage": {
            "label": "struct MetaBots.LastSell",
            "members": [
              {
                "label": "time",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IDEXRouter)7156": {
            "label": "contract IDEXRouter"
          },
          "t_mapping(t_address,t_struct(Counter)1366_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1366_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f509dc0911b56d1dcd6843c1750d38d3b2c3a7df810de241f5851278195226d1": {
      "address": "0xF7e4e38ff8cd6C0eCc508543bfe677912DB28f54",
      "txHash": "0xc7d4d7d57c9dca17089587c93aba84baec6f98dd38581c4a87e7f1e4ff928cf7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:42"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:362"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:112"
          },
          {
            "contract": "ERC2612Upgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1424_storage)",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:19"
          },
          {
            "contract": "ERC2612Upgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:22"
          },
          {
            "contract": "ERC2612Upgradeable",
            "label": "_TRANSFER_TYPEHASH",
            "type": "t_bytes32",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:24"
          },
          {
            "contract": "MetaBots",
            "label": "dividendTracker",
            "type": "t_contract(IDividendTracker)8305",
            "src": "contracts\\MetaBots.sol:44"
          },
          {
            "contract": "MetaBots",
            "label": "gasForProcessing",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:45"
          },
          {
            "contract": "MetaBots",
            "label": "automatedMarketMakerPairs",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\MetaBots.sol:49"
          },
          {
            "contract": "MetaBots",
            "label": "feeExcludedAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\MetaBots.sol:51"
          },
          {
            "contract": "MetaBots",
            "label": "buybackAddress",
            "type": "t_address_payable",
            "src": "contracts\\MetaBots.sol:53"
          },
          {
            "contract": "MetaBots",
            "label": "buybackFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:54"
          },
          {
            "contract": "MetaBots",
            "label": "developmentAddress",
            "type": "t_address_payable",
            "src": "contracts\\MetaBots.sol:55"
          },
          {
            "contract": "MetaBots",
            "label": "developmentFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:56"
          },
          {
            "contract": "MetaBots",
            "label": "marketingAddress",
            "type": "t_address_payable",
            "src": "contracts\\MetaBots.sol:57"
          },
          {
            "contract": "MetaBots",
            "label": "marketingFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:58"
          },
          {
            "contract": "MetaBots",
            "label": "liquidityAddress",
            "type": "t_address",
            "src": "contracts\\MetaBots.sol:59"
          },
          {
            "contract": "MetaBots",
            "label": "liquidityFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:60"
          },
          {
            "contract": "MetaBots",
            "label": "psiTokenAddress",
            "type": "t_address",
            "src": "contracts\\MetaBots.sol:61"
          },
          {
            "contract": "MetaBots",
            "label": "psiFee",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:62"
          },
          {
            "contract": "MetaBots",
            "label": "lastSells",
            "type": "t_mapping(t_address,t_struct(LastSell)3963_storage)",
            "src": "contracts\\MetaBots.sol:68"
          },
          {
            "contract": "MetaBots",
            "label": "sellLimit",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:69"
          },
          {
            "contract": "MetaBots",
            "label": "sellAmountLimited",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:70"
          },
          {
            "contract": "MetaBots",
            "label": "tradingPaused",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:71"
          },
          {
            "contract": "MetaBots",
            "label": "dexRouter",
            "type": "t_contract(IDEXRouter)8124",
            "src": "contracts\\MetaBots.sol:73"
          },
          {
            "contract": "MetaBots",
            "label": "dexPair",
            "type": "t_address",
            "src": "contracts\\MetaBots.sol:74"
          },
          {
            "contract": "MetaBots",
            "label": "inSwapAndLiquify",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:76"
          },
          {
            "contract": "MetaBots",
            "label": "swapAndLiquifyEnabled",
            "type": "t_bool",
            "src": "contracts\\MetaBots.sol:77"
          },
          {
            "contract": "MetaBots",
            "label": "minTokensBeforeSwap",
            "type": "t_uint256",
            "src": "contracts\\MetaBots.sol:78"
          }
        ],
        "types": {
          "t_contract(IDividendTracker)8305": {
            "label": "contract IDividendTracker"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_mapping(t_address,t_struct(LastSell)3963_storage)": {
            "label": "mapping(address => struct MetaBots.LastSell)"
          },
          "t_struct(LastSell)3963_storage": {
            "label": "struct MetaBots.LastSell",
            "members": [
              {
                "label": "time",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IDEXRouter)8124": {
            "label": "contract IDEXRouter"
          },
          "t_mapping(t_address,t_struct(Counter)1424_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1424_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "4a4f459d35abc5880fdbc90493efcb836b93b8b7ee4d6b203df405aaeb42ed38": {
      "address": "0x9Dba91aD964aDF3bA6EaC131C59C187F819E5c1C",
      "txHash": "0xb3a33193ee2dc2f6c63b0921319785e02109744413b66b067942bd907af64b29",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "rewardsToken",
            "type": "t_contract(ERC20Upgradeable)802",
            "src": "contracts\\MetaBotsStaking.sol:19"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "stakingToken",
            "type": "t_contract(ERC20Upgradeable)802",
            "src": "contracts\\MetaBotsStaking.sol:20"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "startTime",
            "type": "t_uint256",
            "src": "contracts\\MetaBotsStaking.sol:24"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "configuredLocks",
            "type": "t_array(t_struct(ConfiguredLock)1459_storage)dyn_storage",
            "src": "contracts\\MetaBotsStaking.sol:30"
          },
          {
            "contract": "MetaBotsStaking",
            "label": "allAccountStakes",
            "type": "t_mapping(t_address,t_array(t_struct(AccountStake)1480_storage)dyn_storage)",
            "src": "contracts\\MetaBotsStaking.sol:43"
          }
        ],
        "types": {
          "t_contract(ERC20Upgradeable)802": {
            "label": "contract ERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(ConfiguredLock)1459_storage)dyn_storage": {
            "label": "struct MetaBotsStaking.ConfiguredLock[]"
          },
          "t_struct(ConfiguredLock)1459_storage": {
            "label": "struct MetaBotsStaking.ConfiguredLock",
            "members": [
              {
                "label": "time",
                "type": "t_uint64"
              },
              {
                "label": "apy",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_address,t_array(t_struct(AccountStake)1480_storage)dyn_storage)": {
            "label": "mapping(address => struct MetaBotsStaking.AccountStake[])"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(AccountStake)1480_storage)dyn_storage": {
            "label": "struct MetaBotsStaking.AccountStake[]"
          },
          "t_struct(AccountStake)1480_storage": {
            "label": "struct MetaBotsStaking.AccountStake",
            "members": [
              {
                "label": "active",
                "type": "t_bool"
              },
              {
                "label": "apy",
                "type": "t_uint32"
              },
              {
                "label": "started",
                "type": "t_uint64"
              },
              {
                "label": "unlock",
                "type": "t_uint64"
              },
              {
                "label": "lastUpdated",
                "type": "t_uint64"
              },
              {
                "label": "stake",
                "type": "t_uint256"
              },
              {
                "label": "currentRewards",
                "type": "t_uint256"
              },
              {
                "label": "withdrawnRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "133504ab62760ae9022aa5531635d71849e63ab3f89ec517bad7bb9f80502e84": {
      "address": "0x3551d0a124a55D7a3805c0a2daF9dAc4608D78a4",
      "txHash": "0x8164d7334e6129008311160e6baee61a9c236b2a060c15e594cf42ca657edb07",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:37"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:42"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "154",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "155",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "156",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:362"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "201",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "202",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "203",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:112"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "253",
            "type": "t_mapping(t_address,t_struct(Counter)1424_storage)",
            "contract": "ERC2612Upgradeable",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:19"
          },
          {
            "label": "_PERMIT_TYPEHASH",
            "offset": 0,
            "slot": "254",
            "type": "t_bytes32",
            "contract": "ERC2612Upgradeable",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:22"
          },
          {
            "label": "_TRANSFER_TYPEHASH",
            "offset": 0,
            "slot": "255",
            "type": "t_bytes32",
            "contract": "ERC2612Upgradeable",
            "src": "contracts\\token\\ERC2612\\ERC2612Upgradeable.sol:24"
          },
          {
            "label": "dividendTracker",
            "offset": 0,
            "slot": "256",
            "type": "t_contract(IDividendTracker)8309",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:44"
          },
          {
            "label": "gasForProcessing",
            "offset": 0,
            "slot": "257",
            "type": "t_uint256",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:45"
          },
          {
            "label": "automatedMarketMakerPairs",
            "offset": 0,
            "slot": "258",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:49"
          },
          {
            "label": "feeExcludedAddresses",
            "offset": 0,
            "slot": "259",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:51"
          },
          {
            "label": "buybackAddress",
            "offset": 0,
            "slot": "260",
            "type": "t_address_payable",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:53"
          },
          {
            "label": "buybackFee",
            "offset": 0,
            "slot": "261",
            "type": "t_uint256",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:54"
          },
          {
            "label": "developmentAddress",
            "offset": 0,
            "slot": "262",
            "type": "t_address_payable",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:55"
          },
          {
            "label": "developmentFee",
            "offset": 0,
            "slot": "263",
            "type": "t_uint256",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:56"
          },
          {
            "label": "marketingAddress",
            "offset": 0,
            "slot": "264",
            "type": "t_address_payable",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:57"
          },
          {
            "label": "marketingFee",
            "offset": 0,
            "slot": "265",
            "type": "t_uint256",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:58"
          },
          {
            "label": "liquidityAddress",
            "offset": 0,
            "slot": "266",
            "type": "t_address",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:59"
          },
          {
            "label": "liquidityFee",
            "offset": 0,
            "slot": "267",
            "type": "t_uint256",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:60"
          },
          {
            "label": "psiTokenAddress",
            "offset": 0,
            "slot": "268",
            "type": "t_address",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:61"
          },
          {
            "label": "psiFee",
            "offset": 0,
            "slot": "269",
            "type": "t_uint256",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:62"
          },
          {
            "label": "lastSells",
            "offset": 0,
            "slot": "270",
            "type": "t_mapping(t_address,t_struct(LastSell)3963_storage)",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:68"
          },
          {
            "label": "sellLimit",
            "offset": 0,
            "slot": "271",
            "type": "t_uint256",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:69"
          },
          {
            "label": "sellAmountLimited",
            "offset": 0,
            "slot": "272",
            "type": "t_bool",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:70"
          },
          {
            "label": "tradingPaused",
            "offset": 1,
            "slot": "272",
            "type": "t_bool",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:71"
          },
          {
            "label": "dexRouter",
            "offset": 2,
            "slot": "272",
            "type": "t_contract(IDEXRouter)8128",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:73"
          },
          {
            "label": "dexPair",
            "offset": 0,
            "slot": "273",
            "type": "t_address",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:74"
          },
          {
            "label": "inSwapAndLiquify",
            "offset": 20,
            "slot": "273",
            "type": "t_bool",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:76"
          },
          {
            "label": "swapAndLiquifyEnabled",
            "offset": 21,
            "slot": "273",
            "type": "t_bool",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:77"
          },
          {
            "label": "minTokensBeforeSwap",
            "offset": 0,
            "slot": "274",
            "type": "t_uint256",
            "contract": "MetaBots",
            "src": "contracts\\MetaBots.sol:78"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IDEXRouter)8128": {
            "label": "contract IDEXRouter",
            "numberOfBytes": "20"
          },
          "t_contract(IDividendTracker)8309": {
            "label": "contract IDividendTracker",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)1424_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(LastSell)3963_storage)": {
            "label": "mapping(address => struct MetaBots.LastSell)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)1424_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LastSell)3963_storage": {
            "label": "struct MetaBots.LastSell",
            "members": [
              {
                "label": "time",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      }
    }
  }
}
